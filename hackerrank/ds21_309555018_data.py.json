{"username":"ds21_309555018","email":"leoyclee@gmail.com","country":"Taiwan","name":"ds21_ 309555018","city":"Taipei","website":"","job_title":"","local_language":"English","github_url":"https://github.com/ycleo","gh_uid":"64058170","personal_first_name":"ds21_","personal_last_name":"309555018","graduation_year":"2022","timezone":"Asia/Taipei","is_professional":false,"gender":"","jobs_headline":"","preferred_lang":"cpp","hackos":1286,"favorite_challenges":[],"challenges_created":[],"other_emails":[],"all_schools":[],"snippets":[],"submissions":[{"contest":"practice_0","challenge":"Arrays - DS","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the reverseArray function below.\ndef reverseArray(a):\n    a.reverse()\n    return(a)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_count = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    res = reverseArray(arr)\n\n    fptr.write(' '.join(map(str, res)))\n    fptr.write('\\n')\n\n    fptr.close()\n\n","score":1.0,"language":"python3"},{"contest":"practice_1","challenge":"Searching Problem","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'Search' function below.\n#\n# The function is expected to return a STRING_ARRAY.\n# The function accepts following parameters:\n#  1. LONG_INTEGER_ARRAY A\n#  2. LONG_INTEGER_ARRAY Q\n#\nfrom bisect import bisect_left\n\n\ndef Search(A, Q):\n    # Write your code here\n    output = []\n    A.sort()\n    for element in Q:\n        i = bisect_left(A, element)\n        if i != len(A) and element == A[i]:\n            output.append('yes')\n        else:\n            output.append('no')\n    return(output)\n    \n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        n = int(input().strip())\n\n        A = list(map(int, input().rstrip().split()))\n\n        Q = list(map(int, input().rstrip().split()))\n\n        R = Search(A, Q)\n\n        fptr.write(' '.join(R))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"practice_0","challenge":"Arrays - DS","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the reverseArray function below.\ndef reverseArray(a):\n    return(reversed(a))\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_count = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    res = reverseArray(arr)\n\n    fptr.write(' '.join(map(str, res)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"practice_1","challenge":"Searching Problem","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nfrom bisect import bisect_left\n#\n# Complete the 'Search' function below.\n#\n# The function is expected to return a STRING_ARRAY.\n# The function accepts following parameters:\n#  1. LONG_INTEGER_ARRAY A\n#  2. LONG_INTEGER_ARRAY Q\n#\n\ndef Search(A, Q):\n    # Write your code here\n    output = []\n    A.sort()\n    for element in Q:\n        i = bisect_left(A, element)\n        if i != len(A) and A[i] == element:\n            output.append('yes')\n        else:\n            output.append('no')\n    return(output)\n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        n = int(input().strip())\n\n        A = list(map(int, input().rstrip().split()))\n\n        Q = list(map(int, input().rstrip().split()))\n\n        R = Search(A, Q)\n\n        fptr.write(' '.join(R))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"practice_2","challenge":"Merge Sort on Integer Sequence","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'MergeSortInNondecreasingOrder' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts LONG_INTEGER_ARRAY A as parameter.\n#\ndef MergeSort(A, compare):\n    if len(A)\u003e1:\n        mid = len(A)//2\n        left = A[:mid]\n        right = A[mid:]\n        MergeSort(left, compare)\n        MergeSort(right, compare)\n        s = 0\n        e = 0\n        p = 0\n        while s \u003c len(left) and e \u003c len(right):\n            if compare(left[s], right[e]):\n                A[p] = left[s]\n                s += 1\n            else:\n                A[p] = right[e]\n                e += 1\n            p += 1\n        \n        while s \u003c len(left):\n            A[p] = left[s]\n            s += 1\n            p += 1\n        while e \u003c len(right):\n            A[p] = right[e]\n            e += 1\n            p += 1\n        \ndef MergeSortInNondecreasingOrder(A):\n    # Write your code here\n    buffer = A[:]\n    MergeSort(buffer, lambda a,b: a \u003c b)\n    return(buffer)\n    \n#\n# Complete the 'MergeSortInNonincreasingOrder' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts LONG_INTEGER_ARRAY A as parameter.\n#\n\ndef MergeSortInNonincreasingOrder(A):\n    # Write your code here\n    buffer = A[:]\n    MergeSort(buffer, lambda a,b: a \u003e b)\n    return(buffer)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        n = int(input().strip())\n\n        A = list(map(int, input().rstrip().split()))\n\n        non_decreasingly_sorted_A = MergeSortInNondecreasingOrder(A)\n\n        non_increasingly_sorted_A = MergeSortInNonincreasingOrder(A)\n\n        fptr.write(' '.join(map(str, non_decreasingly_sorted_A)))\n        fptr.write('\\n')\n\n        fptr.write(' '.join(map(str, non_increasingly_sorted_A)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"practice_2","challenge":"Merge Sort on Integer Sequence","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'MergeSortInNondecreasingOrder' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts LONG_INTEGER_ARRAY A as parameter.\n#\n\ndef MergeSort(A, compare):\n    if len(A)\u003e1:\n        mid = len(A)//2\n        left = A[:mid]\n        right = A[mid:]\n        MergeSort(left, compare)\n        MergeSort(right, compare)\n        s = 0\n        e = 0\n        p = 0\n        while s \u003c len(left) and e \u003c len(right):\n            if compare(left[s], right[e]):    #key step!!!!!!!\n                A[p] = left[s]\n                s += 1\n            else:\n                A[p] = right[e]\n                e += 1\n            p += 1\n        \n        while s \u003c len(left):\n            A[p] = left[s]\n            s += 1\n            p += 1\n        while e \u003c len(right):\n            A[p] = right[e]\n            e += 1\n            p += 1\n        \ndef MergeSortInNondecreasingOrder(A):\n    # Write your code here\n    buffer = A[:]\n    MergeSort(buffer, lambda a,b: a \u003c b)\n    return(buffer)\n    \n#\n# Complete the 'MergeSortInNonincreasingOrder' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts LONG_INTEGER_ARRAY A as parameter.\n#\n\ndef MergeSortInNonincreasingOrder(A):\n    # Write your code here\n    buffer = A[:]\n    MergeSort(buffer, lambda a,b: a \u003e b)\n    return(buffer)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        n = int(input().strip())\n\n        A = list(map(int, input().rstrip().split()))\n\n        non_decreasingly_sorted_A = MergeSortInNondecreasingOrder(A)\n\n        non_increasingly_sorted_A = MergeSortInNonincreasingOrder(A)\n\n        fptr.write(' '.join(map(str, non_decreasingly_sorted_A)))\n        fptr.write('\\n')\n\n        fptr.write(' '.join(map(str, non_increasingly_sorted_A)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"practice_3","challenge":"Heap Sort on Sequence","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nimport heapq as hq\n#\n# Complete the 'HeapSortInNondecreasingOrder' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts LONG_INTEGER_ARRAY A as parameter.\n#\n\n    \n\n\ndef HeapSort(A):\n    output = []\n    hq.heapify(A)\n    while len(A) \u003e 0:\n        output.append(hq.heappop(A)) \n    return(output)\n        \ndef HeapSortInNondecreasingOrder(A):\n    # Write your code here\n    buffer = A[:]\n    buffer = HeapSort(buffer)\n    return(buffer)\n#\n# Complete the 'HeapSortInNonincreasingOrder' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts LONG_INTEGER_ARRAY A as parameter.\n#\n\ndef HeapSortInNonincreasingOrder(A):\n    # Write your code here\n    A = list(map(lambda x: x*-1, A))\n    buffer = A[:]\n    buffer = list(map(lambda x: x*-1, HeapSort(buffer)))\n    return(buffer)\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        n = int(input().strip())\n\n        A = list(map(int, input().rstrip().split()))\n\n        non_decreasingly_sorted_A = HeapSortInNondecreasingOrder(A)\n\n        non_increasingly_sorted_A = HeapSortInNonincreasingOrder(A)\n\n        fptr.write(' '.join(map(str, non_decreasingly_sorted_A)))\n        fptr.write('\\n')\n\n        fptr.write(' '.join(map(str, non_increasingly_sorted_A)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"practice_4","challenge":"Two Doubly Linked Lists","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'PerformOperationsOnLists' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts 2D_LONG_INTEGER_ARRAY operations as parameter.\n#\n\ndef PerformOperationsOnLists(operations):\n    # Write your code here\n    List0 = []\n    List1 = []\n    m = len(operations)\n    for op in range(m):\n        if operations[op][0] == 0:  #insert\n            if operations[op][1] == 0:\n                List0.insert(operations[op][2], operations[op][3])\n            else:\n                List1.insert(operations[op][2], operations[op][3])\n        elif operations[op][0] == 1: #delete\n            if operations[op][1] == 0:\n                List0.pop(operations[op][2])\n            else:\n                List1.pop(operations[op][2])\n        else:                           #transfer\n            if operations[op][1] == 0:  #items from List1 transfer to List0\n                remove_len = len(List1) - operations[op][4] \n                x = operations[op][4]   #remove position in List1\n                for _ in range(remove_len):\n                    item = List1.pop(x)\n                    List0.insert(operations[op][2], item)\n            else:                       #items from List0 transfer to List1\n                remove_len = len(List0) - operations[op][4] \n                x = operations[op][4]   #remove position in List0\n                for _ in range(remove_len):\n                    item = List0.pop(x)\n                    List1.insert(operations[op][2], item)\n                    \n    final = List0 + List1\n    return(final)\n            \n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())  \n\n    for t_itr in range(t):\n        m = int(input().strip()) \n\n        operations = []\n\n        for _ in range(m):\n            operations.append(list(map(int, input().rstrip().split())))\n\n        concatenated_list = PerformOperationsOnLists(operations)\n\n        fptr.write(' '.join(map(str, concatenated_list)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"practice_4","challenge":"Two Doubly Linked Lists","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'PerformOperationsOnLists' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts 2D_LONG_INTEGER_ARRAY operations as parameter.\n#\n\ndef PerformOperationsOnLists(operations):\n    # Write your code here\n    List0 = []\n    List1 = []\n    m = len(operations)\n    for op in range(m):\n        if operations[op][0] == 0:  #insert\n            if operations[op][1] == 0:\n                List0.insert(operations[op][2], operations[op][3])\n            else:\n                List1.insert(operations[op][2], operations[op][3])\n        elif operations[op][0] == 1: #delete\n            if operations[op][1] == 0:\n                List0.pop(operations[op][2])\n            else:\n                List1.pop(operations[op][2])\n        else:                           #transfer\n            if operations[op][1] == 0:  #items from List1 transfer to List0\n                remove_len = len(List1) - operations[op][4] \n                x = operations[op][4]   #remove position in List1\n                for i in range(remove_len):\n                    item = List1.pop(x)\n                    List0.insert(operations[op][2] + i, item)\n            else:                       #items from List0 transfer to List1\n                remove_len = len(List0) - operations[op][4] \n                x = operations[op][4]   #remove position in List0\n                for i in range(remove_len):\n                    item = List0.pop(x)\n                    List1.insert(operations[op][2] + i, item)\n                    \n    final = List0 + List1\n    return(final)\n            \n                \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        m = int(input().strip())\n\n        operations = []\n\n        for _ in range(m):\n            operations.append(list(map(int, input().rstrip().split())))\n       \n        concatenated_list = PerformOperationsOnLists(operations)\n\n        fptr.write(' '.join(map(str, concatenated_list)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"practice_4","challenge":"Two Doubly Linked Lists","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'PerformOperationsOnLists' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts 2D_LONG_INTEGER_ARRAY operations as parameter.\n#\n\ndef PerformOperationsOnLists(operations):\n    # Write your code here\n    L = [[], []]\n    \n    for op, id1, po1, id2, po2 in operations:\n        if op == 0:\n            L[id1].insert(po1, id2)\n        elif op == 1:\n            L[id1].pop(po1)\n        else:\n            tmp = L[id2][po2:]\n            L[id1] = L[id1][:po1] + tmp + L[id1][po1:]\n            L[id2] = L[id2][:po2]\n    return(L[0] + L[1])      \n            \n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        m = int(input().strip())\n\n        operations = []\n\n        for _ in range(m):\n            operations.append(list(map(int, input().rstrip().split())))\n\n        concatenated_list = PerformOperationsOnLists(operations)\n\n        fptr.write(' '.join(map(str, concatenated_list)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"assignment_1","challenge":"Merge two sorted linked lists","code":"# Complete the mergeLists function below.\n\n#\n# For your reference:\n#\n# SinglyLinkedListNode:\n#     int data\n#     SinglyLinkedListNode next\n#\n#\ndef mergeLists(head1, head2):\n    tmp = SinglyLinkedListNode(0)\n    \n    end = tmp\n    \n    while True:\n        if head1 == None:\n            end.next = head2\n            break\n        \n        if head2 == None:\n            end.next = head1\n            break\n        \n        if (head1.data \u003e= head2.data):\n            end.next = head2\n            head2 = head2.next\n        else:\n            end.next = head1\n            head1 = head1.next\n            \n        end = end.next\n        \n    return(tmp.next)\n    \n    ","score":1.0,"language":"python3"},{"contest":"assignment_1","challenge":"Equal Stacks","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'equalStacks' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY h1\n#  2. INTEGER_ARRAY h2\n#  3. INTEGER_ARRAY h3\n#\n\ndef equalStacks(h1, h2, h3):\n    # Write your code here\n    L = [h1, h2, h3]\n    while True:\n        s1 = sum(h1)\n        s2 = sum(h2)\n        s3 = sum(h3)\n        s = [s1, s2, s3]\n        if s1 == s2 and s2 == s3:\n            result = s1\n            break\n        target = s.index(max(s))\n        L[target].pop(0)\n    return result\n        \n            \n        \n        \n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n1 = int(first_multiple_input[0])\n\n    n2 = int(first_multiple_input[1])\n\n    n3 = int(first_multiple_input[2])\n\n    h1 = list(map(int, input().rstrip().split()))\n\n    h2 = list(map(int, input().rstrip().split()))\n\n    h3 = list(map(int, input().rstrip().split()))\n\n    result = equalStacks(h1, h2, h3)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Equal Stacks","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'equalStacks' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY h1\n#  2. INTEGER_ARRAY h2\n#  3. INTEGER_ARRAY h3\n#\n\ndef equalStacks(h1, h2, h3):\n    # Write your code hereL = [h1, h2, h3]\n    L = [h1, h2, h3]\n    while True:\n        s1 = sum(h1)\n        s2 = sum(h2)\n        s3 = sum(h3)\n        s = [s1, s2, s3]\n        if s1 == s2 and s2 == s3:\n            result = s1\n            break\n        target = s.index(max(s))\n        L[target].pop(0)\n    return result\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n1 = int(first_multiple_input[0])\n\n    n2 = int(first_multiple_input[1])\n\n    n3 = int(first_multiple_input[2])\n\n    h1 = list(map(int, input().rstrip().split()))\n\n    h2 = list(map(int, input().rstrip().split()))\n\n    h3 = list(map(int, input().rstrip().split()))\n\n    result = equalStacks(h1, h2, h3)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Equal Stacks","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'equalStacks' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY h1\n#  2. INTEGER_ARRAY h2\n#  3. INTEGER_ARRAY h3\n#\n\ndef equalStacks(h1, h2, h3):\n    # Write your code here\n    L = [h1, h2, h3]\n    while True:\n        s1 = sum(h1)\n        s2 = sum(h2)\n        s3 = sum(h3)\n        \n        s = [s1, s2, s3]\n        print(s)\n        if s1 == s2 and s2 == s3:\n            return s1\n            \n        target = s.index(max(s))\n        L[target].pop(0)\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n1 = int(first_multiple_input[0])\n\n    n2 = int(first_multiple_input[1])\n\n    n3 = int(first_multiple_input[2])\n\n    h1 = list(map(int, input().rstrip().split()))\n\n    h2 = list(map(int, input().rstrip().split()))\n\n    h3 = list(map(int, input().rstrip().split()))\n\n    result = equalStacks(h1, h2, h3)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Equal Stacks","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'equalStacks' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY h1\n#  2. INTEGER_ARRAY h2\n#  3. INTEGER_ARRAY h3\n#\n\ndef equalStacks(h1, h2, h3):\n    # Write your code here\n    L = [h1, h2, h3]\n    while True:\n        s1 = sum(h1)\n        s2 = sum(h2)\n        s3 = sum(h3)\n        s = [s1, s2, s3]\n        \n        if s1 == 0 or s2 == 0 or s3 == 0:\n            return 0\n        \n        if s1 == s2 and s2 == s3:\n            return s1\n            \n        target = s.index(max(s))\n        L[target].pop(0)\n        \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n1 = int(first_multiple_input[0])\n\n    n2 = int(first_multiple_input[1])\n\n    n3 = int(first_multiple_input[2])\n\n    h1 = list(map(int, input().rstrip().split()))\n\n    h2 = list(map(int, input().rstrip().split()))\n\n    h3 = list(map(int, input().rstrip().split()))\n\n    result = equalStacks(h1, h2, h3)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Equal Stacks","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'equalStacks' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY h1\n#  2. INTEGER_ARRAY h2\n#  3. INTEGER_ARRAY h3\n#\n\ndef equalStacks(h1, h2, h3):\n    # Write your code here\n     \n    s1=sum(h1)\n    s2=sum(h2)\n    s3=sum(h3)\n    \n    while True:\n        if s1==0 or s2==0 or s3==0:\n            return 0        \n        elif s1==s2==s3:\n            return s3\n        elif s1\u003e=s2 and s1\u003e=s3:\n            s1=s1-h1[0]\n            h1.remove(h1[0])\n        elif s2\u003e=s1 and s2\u003e=s3: \n            s2=s2-h2[0]\n            h2.remove(h2[0])\n        elif s3\u003e=s1 and s3\u003e=s2:\n            s3=s3-h3[0]\n            h3.remove(h3[0])\n        \n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n1 = int(first_multiple_input[0])\n\n    n2 = int(first_multiple_input[1])\n\n    n3 = int(first_multiple_input[2])\n\n    h1 = list(map(int, input().rstrip().split()))\n\n    h2 = list(map(int, input().rstrip().split()))\n\n    h3 = list(map(int, input().rstrip().split()))\n\n    result = equalStacks(h1, h2, h3)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"assignment_1","challenge":"Maximum Element","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'getMax' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts STRING_ARRAY operations as parameter.\n#\n\ndef getMax(operations):\n    # Write your code here\n    stack = []\n    res = []\n    for i in range(len(operations)):\n        if len(operations[i]) \u003e 1:\n            tmp = operations[i].split()\n            stack.insert(0, int(tmp[1]))\n        else:\n            if operations[i] == '2':\n                stack.pop(0)\n            else:\n                res.append(max(stack))\n    return res\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    ops = []\n\n    for _ in range(n):\n        ops_item = input()\n        ops.append(ops_item)\n\n    res = getMax(ops)\n\n    fptr.write('\\n'.join(map(str, res)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Maximum Element","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'getMax' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts STRING_ARRAY operations as parameter.\n#\n\ndef getMax(operations):\n    # Write your code here\n    stack = []\n    res = []\n    for i in range(len(operations)):\n        if len(operations[i]) \u003e 1:\n            tmp = operations[i].split()\n            stack.insert(0, int(tmp[1]))\n        else:\n            if operations[i] == '2':\n                stack.pop(0)\n            else:\n                res.append(max(stack))\n    stack = None            \n    return res\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    ops = []\n\n    for _ in range(n):\n        ops_item = input()\n        ops.append(ops_item)\n\n    res = getMax(ops)\n\n    fptr.write('\\n'.join(map(str, res)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Maximum Element","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'getMax' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts STRING_ARRAY operations as parameter.\n#\n\ndef getMax(operations):\n    # Write your code here\n    res = []\n    \n    stack = []\n    lar = []\n    \n    for i in range(len(operations)):\n        if len(operations[i]) \u003e 1:\n            tmp = operations[i].split()\n            x = int(tmp[1])\n            stack.append(x)\n            if(len(lar) == 0 or x \u003e lar[-1]):\n                lar.append(x)\n            else:\n                lar.append(lar[-1])\n        else:\n            if operations[i] == '2':\n                stack.pop(-1)\n                lar.pop(-1)\n            else:\n                res.append(lar[-1])\n    return res\n    \n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    ops = []\n\n    for _ in range(n):\n        ops_item = input()\n        ops.append(ops_item)\n\n    res = getMax(ops)\n\n    fptr.write('\\n'.join(map(str, res)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"assignment_1","challenge":"Equal Stacks","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'equalStacks' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY h1\n#  2. INTEGER_ARRAY h2\n#  3. INTEGER_ARRAY h3\n#\n\ndef equalStacks(h1, h2, h3):\n    # Write your code here\n    L = [h1, h2, h3]\n    while True:\n        s1 = sum(h1)\n        s2 = sum(h2)\n        s3 = sum(h3)\n        s = [s1, s2, s3]\n        \n        \n        if s1 == 0 or s2 == 0 or s3 == 0:\n            return 0\n        \n        elif s1 == s2 == s3:\n            return s1\n        \n        else:\n            target = min(s)\n            for i in range(3):\n                if s[i] != target:\n                    L[i].pop(0)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n1 = int(first_multiple_input[0])\n\n    n2 = int(first_multiple_input[1])\n\n    n3 = int(first_multiple_input[2])\n\n    h1 = list(map(int, input().rstrip().split()))\n\n    h2 = list(map(int, input().rstrip().split()))\n\n    h3 = list(map(int, input().rstrip().split()))\n\n    result = equalStacks(h1, h2, h3)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Equal Stacks","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'equalStacks' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY h1\n#  2. INTEGER_ARRAY h2\n#  3. INTEGER_ARRAY h3\n#\n\ndef equalStacks(h1, h2, h3):\n    # Write your code here\n    s1, s2, s3 = map(sum, (h1, h2, h3))\n   \n    while True:\n        if s1 == 0 or s2 == 0 or s3 == 0:\n            return 0\n        \n        elif s1 == s2 == s3:\n            return s1\n        \n        else:\n            smallest = min(s1, s2, s3)\n            while s1 \u003e smallest:\n                s1 -= h1.pop(0)\n            while s2 \u003e smallest:\n                s2 -= h2.pop(0)\n            while s3 \u003e smallest:\n                s3 -= h3.pop(0)\n\n    \n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n1 = int(first_multiple_input[0])\n\n    n2 = int(first_multiple_input[1])\n\n    n3 = int(first_multiple_input[2])\n\n    h1 = list(map(int, input().rstrip().split()))\n\n    h2 = list(map(int, input().rstrip().split()))\n\n    h3 = list(map(int, input().rstrip().split()))\n\n    result = equalStacks(h1, h2, h3)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"assignment_1","challenge":"Equal Stacks","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'equalStacks' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY h1\n#  2. INTEGER_ARRAY h2\n#  3. INTEGER_ARRAY h3\n#\n\ndef equalStacks(h1, h2, h3):\n    # Write your code here\n    s1, s2, s3 = map(sum, (h1, h2, h3))\n   \n    while h1 and h2 and h3:\n        if s1 == s2 == s3:\n            return s1\n        smallest = min(s1, s2, s3)\n        while s1 \u003e smallest:\n            s1 -= h1.pop(0)\n        while s2 \u003e smallest:\n            s2 -= h2.pop(0)\n        while s3 \u003e smallest:\n            s3 -= h3.pop(0)\n    return 0\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n1 = int(first_multiple_input[0])\n\n    n2 = int(first_multiple_input[1])\n\n    n3 = int(first_multiple_input[2])\n\n    h1 = list(map(int, input().rstrip().split()))\n\n    h2 = list(map(int, input().rstrip().split()))\n\n    h3 = list(map(int, input().rstrip().split()))\n\n    result = equalStacks(h1, h2, h3)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"assignment_1","challenge":"Maximum Element","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'getMax' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts STRING_ARRAY operations as parameter.\n#\n\ndef getMax(operations):\n    # Write your code here\n    res = []\n    lar = [0]\n    \n    for i in range(len(operations)):\n        op = list(map(int, operations[i].split()))\n        \n        if op[0] == 1:\n            lar.append(max(lar[-1], op[1]))\n        elif op[0] == 2:\n            lar.pop(-1)\n        else:\n            res.append(lar[-1])\n    return res\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    ops = []\n\n    for _ in range(n):\n        ops_item = input()\n        ops.append(ops_item)\n\n    res = getMax(ops)\n\n    fptr.write('\\n'.join(map(str, res)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"assignment_1","challenge":"Jesse and Cookies","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the cookies function below.\n#\ndef cookies(k, A):\n    A.sort()\n    op = 0\n    while A[0] \u003c k and len(A) \u003e= 2:\n        s1 = A.pop(0)\n        s2 = A.pop(0)\n        A.insert(0, s1+2*s2)\n        op += 1\n    return op\n     \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    A = list(map(int, input().rstrip().split()))\n\n    result = cookies(k, A)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Jesse and Cookies","code":"#!/bin/python3\n\nimport os\nimport sys\nfrom bisect import bisect_left\n\n#\n# Complete the cookies function below.\n#\ndef cookies(k, A):\n    A.sort()\n    op = 0\n    while A[0] \u003c k and len(A) \u003e= 2:\n        s1 = A.pop(0)\n        s2 = A.pop(0)\n        t = s1+2*s2\n        A.insert(bisect_left(A, t), t)\n        op += 1\n    return op\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    A = list(map(int, input().rstrip().split()))\n\n    result = cookies(k, A)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Jesse and Cookies","code":"#!/bin/python3\n\nimport os\nimport sys\nfrom bisect import bisect_left\n\n#\n# Complete the cookies function below.\n#\ndef cookies(k, A):\n    A.sort()\n    op = 0\n    while A[0] \u003c k and len(A) \u003e= 2:\n        s1 = A.pop(0)\n        s2 = A.pop(0)\n        t = s1+2*s2\n        A.insert(bisect_left(A, t), t)\n        op += 1\n    return op if op \u003e 0 else -1\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    A = list(map(int, input().rstrip().split()))\n\n    result = cookies(k, A)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Jesse and Cookies","code":"#!/bin/python3\n\nimport os\nimport sys\nfrom heapq import heappop, heappush, heapify\n\n#\n# Complete the cookies function below.\n#\ndef cookies(k, A):\n    heapify(A)\n    op = 0\n    while A[0] \u003c k and len(A) \u003e 1:\n        heappush(A, heappop(A) + 2*heappop(A))\n        op += 1\n    return op if op \u003e 0 else -1\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    A = list(map(int, input().rstrip().split()))\n\n    result = cookies(k, A)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Jesse and Cookies","code":"#!/bin/python3\n\nimport os\nimport sys\nfrom heapq import heapify, heappop, heappush\n\n#\n# Complete the cookies function below.\n#\ndef cookies(k, A):\n      heapify(A)\n    op = 0\n    while A[0] \u003c k and len(A) \u003e 1:\n        heappush(A, heappop(A) + 2*heappop(A))\n        op += 1\n    return op if A[0] \u003e= k else -1\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    A = list(map(int, input().rstrip().split()))\n\n    result = cookies(k, A)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Jesse and Cookies","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the cookies function below.\n#\ndef cookies(k, A):\n    from heapq import heapify, heappop, heappush\n\n    count = 0\n    heapify(A)\n\n    while A[0] \u003c k and len(A) \u003e 1:\n        heappush( A, heappop(A) + 2 * heappop(A) )\n        count += 1\n    \n    return count if A[0] \u003e= k else -1\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    A = list(map(int, input().rstrip().split()))\n\n    result = cookies(k, A)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"assignment_1","challenge":"Jesse and Cookies","code":"#!/bin/python3\n\nimport os\nimport sys\nfrom heapq import heappop, heappush, heapify\n\n#\n# Complete the cookies function below.\n#\ndef cookies(k, A):\n    \n    heapify(A)\n    op = 0\n    \n    while A[0] \u003c k and len(A) \u003e 1:\n        heappush( A, heappop(A) + 2 * heappop(A) )\n        op += 1\n    \n    return op if A[0] \u003e= k else -1\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    A = list(map(int, input().rstrip().split()))\n\n    result = cookies(k, A)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"assignment_1","challenge":"Jesse and Cookies","code":"#!/bin/python3\n\nimport os\nimport sys\nfrom bisect import bisect_left\n\n#\n# Complete the cookies function below.\n#\ndef cookies(k, A):\n    A.sort()\n    op = 0\n    while A[0] \u003c k and len(A) \u003e= 2:\n        s1 = A.pop(0)\n        s2 = A.pop(0)\n        t = s1+2*s2\n        A.insert(bisect_left(A, t), t)\n        op += 1\n    return op if A[0] \u003e= k else -1\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    A = list(map(int, input().rstrip().split()))\n\n    result = cookies(k, A)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Jesse and Cookies","code":"#!/bin/python3\n\nimport os\nimport sys\nfrom heapq import heappop, heappush, heapify\n\n#\n# Complete the cookies function below.\n#\ndef cookies(k, A):\n    heapify(A)\n    op = 0\n    while A[0] \u003c k and len(A) \u003e 1:\n        heappush(A, heappop(A) + 2 * heappop(A))\n        op += 1\n    return op if A[0] \u003e= k else -1\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    A = list(map(int, input().rstrip().split()))\n\n    result = cookies(k, A)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"assignment_1","challenge":"Merge K Sorted Sequences","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom heapq import heapify, heappop, heappush\n\n#\n# Complete the 'MergeKSortedSequences' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts 2D_LONG_INTEGER_ARRAY sequences as parameter.\n#\n\ndef MergeKSortedSequences(s):\n    ans = []\n    \n    theap = [] \n    ineg = math.inf\n    k = len(s)\n    n = len(s[0])\n   \n    \n    #initiallize\n    for i in range(k):\n        for j in range(n):\n            s[i][j] = (-s[i][j], i)\n        theap.append(s[i].pop(0))  #create a max heap\n    heapify(theap)\n    \n    #\n    while True:\n        val, subl = heappop(theap)\n        if val == ineg:\n            break\n            \n        ans.append( -val )\n        if s[subl]:\n            heappush(theap, s[subl].pop(0))\n        else:\n            heappush(theap, (ineg, subl))\n        \n    return ans\n  \n        \n    \n    \n    \n    \n    \n        \n   \n    \n    \n    \n\n\n                \n        \n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        k = int(input().strip())\n\n        n = int(input().strip())\n\n        sequences = []\n\n        for _ in range(k):\n            sequences.append(list(map(int, input().rstrip().split())))\n\n        merged_sequences = MergeKSortedSequences(sequences)\n\n        fptr.write(' '.join(map(str, merged_sequences)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Merge K Sorted Sequences","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom heapq import heapify, heappop, heappush\n\n#\n# Complete the 'MergeKSortedSequences' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts 2D_LONG_INTEGER_ARRAY sequences as parameter.\n#\n\ndef MergeKSortedSequences(s):\n    ans = []\n    \n    theap = [] \n    ineg = math.inf\n    k = len(s)\n    n = len(s[0])\n   \n    \n    #initiallize\n    for i in range(k):\n        for j in range(n):\n            s[i][j] = (-s[i][j], i)\n        theap.append(s[i].pop(0))  #create a min heap\n    heapify(theap)\n    \n    #\n    while True:\n        val, subl = heappop(theap)\n        if val == ineg:\n            break\n            \n        ans.append( -val )\n        if s[subl]:\n            heappush(theap, s[subl].pop(0))\n        else:\n            theap.append((ineg, subl))\n        \n    return ans\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        k = int(input().strip())\n\n        n = int(input().strip())\n\n        sequences = []\n\n        for _ in range(k):\n            sequences.append(list(map(int, input().rstrip().split())))\n\n        merged_sequences = MergeKSortedSequences(sequences)\n\n        fptr.write(' '.join(map(str, merged_sequences)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Merge K Sorted Sequences","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom heapq import heapify, heappop, heappush\n\n#\n# Complete the 'MergeKSortedSequences' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts 2D_LONG_INTEGER_ARRAY sequences as parameter.\n#\n\ndef MergeKSortedSequences(s):\n    ans = []\n    \n    theap = []   #heap list with tuples\n    heapify(theap)\n    ineg = math.inf\n    k = len(s)\n    n = len(s[0])\n   \n    \n    #initiallize\n    for i in range(k):\n        heappush(theap, (-s[i].pop(0), i) )\n        \n     #create a min heap\n   \n\n    while True:\n        val, subl = heappop(theap)\n        if val == ineg:\n            break\n            \n        ans.append( -val )\n        if s[subl]:\n            heappush(theap, (-s[subl].pop(0), subl))\n        else:\n            heappush(theap, (ineg, subl))\n        \n    return ans\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        k = int(input().strip())\n\n        n = int(input().strip())\n\n        sequences = []\n\n        for _ in range(k):\n            sequences.append(list(map(int, input().rstrip().split())))\n\n        merged_sequences = MergeKSortedSequences(sequences)\n\n        fptr.write(' '.join(map(str, merged_sequences)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Merge K Sorted Sequences","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom heapq import heapify, heappop, heappush\n\n#\n# Complete the 'MergeKSortedSequences' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts 2D_LONG_INTEGER_ARRAY sequences as parameter.\n#\n\ndef MergeKSortedSequences(s):\n    ans = []\n    \n    theap = []   #heap list with tuples\n    \n    ineg = math.inf\n    k = len(s)\n    n = len(s[0])\n   \n    \n    #initiallize\n    for i in range(k):\n        theap.append( (-s[i].pop(0), i) )\n    heapify(theap) \n     #create a min heap\n   \n\n    while True:\n        val, subl = heappop(theap)\n        if val == ineg:\n            break\n            \n        ans.append( -val )\n        if s[subl]:\n            heappush(theap, (-s[subl].pop(0), subl))\n        else:\n            heappush(theap, (ineg, subl))\n        \n    return ans\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        k = int(input().strip())\n\n        n = int(input().strip())\n\n        sequences = []\n\n        for _ in range(k):\n            sequences.append(list(map(int, input().rstrip().split())))\n\n        merged_sequences = MergeKSortedSequences(sequences)\n\n        fptr.write(' '.join(map(str, merged_sequences)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Merge K Sorted Sequences","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nfrom heapq import heapify, heappop, heappush\n\n#\n# Complete the 'MergeKSortedSequences' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts 2D_LONG_INTEGER_ARRAY sequences as parameter.\n#\n\n\ndef MergeKSortedSequences(s):\n    ans = []\n    \n    theap = []   #heap list with tuples\n    ineg = math.inf\n    k = len(s)\n    n = len(s[0])\n   \n    \n    #initiallize\n    for i in range(k):\n        theap.append( (-s[i].pop(0), i) ) #O(k)\n    heapify(theap)  #O(k)\n     #create a min heap\n   \n\n    while True:\n        val, subl = heappop(theap) #O(lgk)\n        if val == ineg:\n            break\n            \n        ans.append( -val )\n        if s[subl]:\n            heappush(theap, (-s[subl].pop(0), subl)) #O(lgk)\n        else:\n            heappush(theap, (ineg, subl))\n        \n    return ans\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        k = int(input().strip())\n\n        n = int(input().strip())\n\n        sequences = []\n\n        for _ in range(k):\n            sequences.append(list(map(int, input().rstrip().split())))\n\n        merged_sequences = MergeKSortedSequences(sequences)\n\n        fptr.write(' '.join(map(str, merged_sequences)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Merge K Sorted Sequences","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nfrom heapq import heapify, heappop, heappush\ninfi = math.inf\n#\n# Complete the 'MergeKSortedSequences' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts 2D_LONG_INTEGER_ARRAY sequences as parameter.\n#\n\n\ndef MergeKSortedSequences(s):\n    ans = []\n    theap = [(infi, -1)]   #heap list with tuples\n    \n    k = len(s)\n    n = len(s[0])\n   \n    \n    #initiallize\n    for i in range(k):\n        theap.append( (-s[i].pop(0), i) ) #O(k)\n    heapify(theap)  #O(k)\n     #create a min heap\n   \n\n    while True:\n        val, subl = heappop(theap) #O(lgk)\n        if val == infi:\n            break\n            \n        ans.append( -val )\n        if s[subl]:\n            heappush(theap, (-s[subl].pop(0), subl)) #O(lgk)\n        \n        \n    return ans\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        k = int(input().strip())\n\n        n = int(input().strip())\n\n        sequences = []\n\n        for _ in range(k):\n            sequences.append(list(map(int, input().rstrip().split())))\n\n        merged_sequences = MergeKSortedSequences(sequences)\n\n        fptr.write(' '.join(map(str, merged_sequences)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Merge K Sorted Sequences","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom heapq import heapify, heappop, heappush\ninfi = math.inf\n#\n# Complete the 'MergeKSortedSequences' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts 2D_LONG_INTEGER_ARRAY sequences as parameter.\n#\n\n\ndef MergeKSortedSequences(s):\n    ans = []\n    theap = [(infi, -1)]   #heap list with tuples\n    \n    k = len(s)\n    n = len(s[0])\n   \n    \n    #initiallize\n    for i in range(k):\n        theap.append( (-s[i].pop(0), i) ) #O(k)\n    heapify(theap)  #O(k)\n     #create a min heap\n   \n    val = 0\n    \n    while val != infi:\n        val, subl = heappop(theap) #O(lgk)\n        ans.append( -val )\n        if s[subl]:\n            heappush(theap, (-s[subl].pop(0), subl)) #O(lgk)\n        \n        \n    return ans[:-1]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        k = int(input().strip())\n\n        n = int(input().strip())\n\n        sequences = []\n\n        for _ in range(k):\n            sequences.append(list(map(int, input().rstrip().split())))\n\n        merged_sequences = MergeKSortedSequences(sequences)\n\n        fptr.write(' '.join(map(str, merged_sequences)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Merge K Sorted Sequences","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom heapq import heapify, heappop, heappush\ninfi = math.inf\n#\n# Complete the 'MergeKSortedSequences' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts 2D_LONG_INTEGER_ARRAY sequences as parameter.\n#\n\n\ndef MergeKSortedSequences(s):\n    ans = []\n    theap = [(infi, -1)]   #heap list with tuples\n    \n    k = len(s)\n    n = len(s[0])\n   \n    \n    #initiallize\n    for i in range(k):\n        theap.append( (-s[i].pop(0), i) ) #O(k)\n    heapify(theap)  #O(k)\n     #create a min heap\n   \n    val = 0\n    \n    while val != infi:\n        val, subl = heappop(theap) #O(lgk)\n        ans.append( -val )\n        if s[subl]:\n            heappush(theap, (-s[subl].pop(0), subl)) #O(lgk)\n    ans.pop(-1)    \n        \n    return ans\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        k = int(input().strip())\n\n        n = int(input().strip())\n\n        sequences = []\n\n        for _ in range(k):\n            sequences.append(list(map(int, input().rstrip().split())))\n\n        merged_sequences = MergeKSortedSequences(sequences)\n\n        fptr.write(' '.join(map(str, merged_sequences)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"assignment_1","challenge":"Top K Integer Sequence","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom heapq import heapify, heappop, heappush\n#\n# Complete the 'TopKIntegerSequence' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts 2D_LONG_INTEGER_ARRAY matrix as parameter.\n#\n\ndef TopKIntegerSequence(matrix):\n    # Write your code here\n    ans = []\n    k = len(matrix)\n    n = len(matrix[0])\n    \n    mheap = []\n    for i in range(k):\n        for j in range(n):\n            heappush(mheap, matrix[i][j])\n            if j == (n-1):\n                ans.append(heappop(mheap))\n    return ans\n        \n    \n    \n    \n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        k = int(input().strip())\n\n        n = int(input().strip())\n\n        matrix = []\n\n        for _ in range(k):\n            matrix.append(list(map(int, input().rstrip().split())))\n\n        top_k_integer_sequence = TopKIntegerSequence(matrix)\n\n        fptr.write(' '.join(map(str, top_k_integer_sequence)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"assignment_1","challenge":"Merge K Sorted Sequences","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\ndef merge(unit1, unit2):\n    r = []\n    i = j = 0\n    \n    if unit2 is None:\n        return unit1\n    else:\n        while i \u003c len(unit1) and j \u003c len(unit2):\n            \n            if unit1[i] \u003c unit2[j]:\n                r.append(unit2[j])\n                j += 1\n            else:\n                r.append(unit1[i])\n                i += 1\n\n        if i == len(unit1):\n            r.extend(unit2[j:])\n        if j == len(unit2):\n            r.extend(unit1[i:])\n\n    return(r)\n#\n# Complete the 'MergeKSortedSequences' function below.\n#\n# The function is expected to return a LONG_INTEGER_ARRAY.\n# The function accepts 2D_LONG_INTEGER_ARRAY sequences as parameter.\n#\ndef MergeKSortedSequences(s):\n   \n    while len(s) \u003e 1:\n        ans = []\n        for i in range(0, len(s), 2):\n            unit1 = s[i]\n            unit2 = s[i+1] if (i+1)\u003clen(s) else None\n            t = merge(unit1, unit2)\n            ans.append(t)\n        s = ans    \n    return s[0]\n        \n   \n            \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        k = int(input().strip())\n\n        n = int(input().strip())\n\n        sequences = []\n\n        for _ in range(k):\n            sequences.append(list(map(int, input().rstrip().split())))\n\n        merged_sequences = MergeKSortedSequences(sequences)\n\n        fptr.write(' '.join(map(str, merged_sequences)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Solve Me First","code":"#include \u003ccmath\u003e\n#include \u003ccstdio\u003e\n#include \u003cvector\u003e\n#include \u003ciostream\u003e\n#include \u003calgorithm\u003e\nusing namespace std;\n\nint solveMeFirst(int a, int b) {\n // Hint: Type return a+b; below:\n  int s;\n    s = a + b;\n        return s;\n}\n\nint main() {\n  int num1, num2;\n  int sum;\n  cin\u003e\u003enum1\u003e\u003enum2;\n  sum = solveMeFirst(num1,num2);\n  cout\u003c\u003csum;\n  return 0;\n}","score":1.0,"language":"cpp"},{"contest":"Master","challenge":"Say \"Hello, World!\" With C++","code":"#include \u003ciostream\u003e\n#include \u003ccstdio\u003e\nusing namespace std;\n\nint main() {\n    cout\u003c\u003c\"Hello, World!\";\n    return 0;\n}\n","score":1.0,"language":"cpp"},{"contest":"Master","challenge":"Basic Data Types","code":"#include \u003ciostream\u003e\n#include \u003ccstdio\u003e\nusing namespace std;\n\nint a = 3;\nlong b = 12345678912345;\nchar c = 'a';\nfloat d = 334.23;\ndouble e = 14049.30493;\n\n\nint main() {\n\n    printf(\"%d\\r\\n%ld\\r\\n%c\\r\\n%7.3f\\r\\n%15.9lf\", a, b, c, d, e);\n    // Complete the code.\n    return 0;\n}\n","score":0.0,"language":"cpp"},{"contest":"Master","challenge":"Basic Data Types","code":"#include \u003ciostream\u003e\n#include \u003ccstdio\u003e\nusing namespace std;\n\nint a;\nlong b;\nchar c;\nfloat d;\ndouble e;\n\n\n\nint main() {\n\n    cin \u003e\u003ea\u003e\u003eb\u003e\u003ec\u003e\u003ed\u003e\u003ee;\n    printf(\"%d\\r\\n%ld\\r\\n%c\\r\\n%7.3f\\r\\n%15.9lf\", a, b, c, d, e);\n    // Complete the code.\n    return 0;\n}\n","score":1.0,"language":"cpp"},{"contest":"Master","challenge":"Say \"Hello, World!\" With Python","code":"print(\"Hello, World!\")\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if (year % 4 == 0):\n        if(year % 100 == 0):\n            if(year % 400 == 0):\n                leap = True\n    return leap\n    # Write your logic here\n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if (year % 4 == 0):\n        if(year % 100 != 0):\n                leap = True\n    return leap\n    # Write your logic here\n\n","score":0.6,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if (year % 4 == 0):\n        if(year % 100 != 0):\n            if(year % 400 ==0):\n                leap = True\n    return leap\n    # Write your logic here\n\n","score":0.4,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if (year % 4 == 0 and year % 100 != 0):\n        leap = True\n    elif (year % 400 == 0):\n        leap = True\n    return leap\n    # Write your logic here\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    a = \"Weird\"\n    if (n \u003e= 6 and n \u003c= 20):\n        print(a)\n    elif (n % 2 != 0):\n        print(a)\n    else:\n        a = \"Not Weird\"\n        print(a)\n\n        \n        \n    \n    \n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Python: Division","code":"if __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(a//b)\n    print(a/b)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Loops","code":"if __name__ == '__main__':\n    n = int(input())\n    for i in range(n):\n        print(i*i)\n","score":1.0,"language":"python3"}],"teams":[],"contest_participations":[{"jobs_consent":null,"contest":"Master"},{"jobs_consent":null,"contest":"practice_0"},{"jobs_consent":null,"contest":"practice_0"},{"jobs_consent":null,"contest":"practice_1"},{"jobs_consent":null,"contest":"practice_1"},{"jobs_consent":null,"contest":"assignment_1"},{"jobs_consent":null,"contest":"assignment_1"},{"jobs_consent":null,"contest":"practice_2"},{"jobs_consent":null,"contest":"practice_2"},{"jobs_consent":null,"contest":"practice_3"},{"jobs_consent":null,"contest":"practice_3"},{"jobs_consent":null,"contest":"practice_4"},{"jobs_consent":null,"contest":"practice_4"},{"jobs_consent":null,"contest":"practice_5"},{"jobs_consent":null,"contest":"practice_5"}],"forum_comments":[],"all_ratings":[],"contest_medals":[],"survey_results":[],"messages_sent":[],"run_codes":[],"contests_created":[],"job_applications":[],"skills_test":[]}